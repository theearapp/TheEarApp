{
  "_args": [
    [
      {
        "raw": "random@^2.2.0",
        "scope": null,
        "escapedName": "random",
        "name": "random",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "C:\\Users\\j\\Documents\\TheEar"
    ]
  ],
  "_from": "random@^2.2.0",
  "_hasShrinkwrap": false,
  "_id": "random@2.2.0",
  "_location": "/random",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/random_2.2.0_1584737263666_0.7546351971035652"
  },
  "_npmUser": {
    "name": "fisch0920",
    "email": "fisch0920@gmail.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "random@^2.2.0",
    "scope": null,
    "escapedName": "random",
    "name": "random",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/random/-/random-2.2.0.tgz",
  "_shasum": "a02cd920e2f50713ad8070b3b76c01439cc51c1c",
  "_shrinkwrap": null,
  "_spec": "random@^2.2.0",
  "_where": "C:\\Users\\j\\Documents\\TheEar",
  "author": {
    "name": "Travis Fischer",
    "email": "travis@automagical.ai"
  },
  "ava": {
    "require": [
      "esm"
    ]
  },
  "babel": {
    "presets": [
      "env"
    ]
  },
  "bugs": {
    "url": "https://github.com/transitive-bullshit/random/issues"
  },
  "dependencies": {
    "babel-runtime": "^6.26.0",
    "ow": "^0.4.0",
    "ow-lite": "^0.0.2",
    "seedrandom": "^3.0.5"
  },
  "description": "Seedable random number generator supporting many common distributions.",
  "devDependencies": {
    "ava": "^3.5.0",
    "babel-cli": "^6.26.0",
    "babel-preset-env": "^1.7.0",
    "del-cli": "^1.1.0",
    "dev-cli": "^0.0.0",
    "esm": "^3.2.25",
    "standard": "^14.3.3",
    "update-markdown-jsdoc": "^1.0.11"
  },
  "directories": {},
  "dist": {
    "shasum": "a02cd920e2f50713ad8070b3b76c01439cc51c1c",
    "integrity": "sha512-4HBR4Xye4jJ41QBi6RfIaO1yKQpxVUZafQtdE6NvvjzirNlwWgsk3tkGLTbQtWUarF4ofZsUVEmWqB1TDQlkwA==",
    "tarball": "https://registry.npmjs.org/random/-/random-2.2.0.tgz",
    "fileCount": 45,
    "unpackedSize": 88377,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJedSvwCRA9TVsSAnZWagAA2YIP/RY4/0tbFaON9Qf9Ow9Y\nbWWMke8uoXzMLLb1GXs5UFBkEld0XQWdDSjA8Sxie4DQxK6JoYW9xZBeXV9d\nwGf+tM1e2hKdVq3vyyBypBhAS7pnDUH7r7ZD1YuP+wbEA6QGAB/9mpnS4CWS\nFSz+fzP3N4DOUtEUlaSObVo1ndDYoJhbCD+JP9G5IMMEuD71CRR9hAacW8FX\nMZzAe18JI/S1UNAnmT+h2l/yhYMT8g+aRumVRwCrVzFRl3JVytG83/B1IZXu\ndKZ8u+jWVHn/LizcsdtrFzt72BZ/PZ8pvtnj9QX+RXqt/4tIQFqiqWTY/oEI\nXZWMOi7EnLFsIDrFXQ8zcLwn1yp1QfZK1w+JL9kWbZSvBRXWk5g6y+8dv+0h\nrace4byoj/zPxxu4MbAHrxEnM+CbApXuxZ3R1DVvONP93Yjm61jobA3DDn9v\nxge3t1uClBjI+nIBMtbEhjFFCCck4dbbaFn+m43NtrlbQR4ZMvuYaye7zaGJ\nRGTAHwMw8tHDdRPP3coEW50AnttiLVJ8rPvnC5EXym6wZuLpDEpyRTrn+92T\ndmw/D+VQdiyt5lxFwWRmzSEovxuK1UeO80G3H6dn6iT9EcbNG6Xf98zUSxka\nv7jdwMaJ9Lu9SGkWmbAq+n1xMTVV+UwH0uxgoMGCx/jg8nTD9Zd0bvYKdGUE\nIFgw\r\n=rqmb\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8"
  },
  "files": [
    "index.js",
    "dist"
  ],
  "homepage": "https://github.com/transitive-bullshit/random#readme",
  "keywords": [
    "random",
    "number",
    "generator",
    "rng",
    "prng",
    "stats",
    "d3-random",
    "seedrandom",
    "distribution",
    "pseudorandom",
    "uniform",
    "normal",
    "gaussian",
    "lognormal",
    "poisson",
    "exponential",
    "irwinhall",
    "bates"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "fisch0920",
      "email": "fisch0920@gmail.com"
    }
  ],
  "module": "src/random.js",
  "name": "random",
  "optionalDependencies": {},
  "readme": "# random\n\n> Seedable random number generator supporting many common distributions.\n\n[![NPM](https://img.shields.io/npm/v/random.svg)](https://www.npmjs.com/package/random) [![Build Status](https://travis-ci.com/transitive-bullshit/random.svg?branch=master)](https://travis-ci.com/transitive-bullshit/random) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\nWelcome to the most **random** module on npm! ðŸ˜œ\n\n## Highlights\n\n-   Simple API (_make easy things easy and hard things possible_)\n-   Seedable based on entropy or user input\n-   Plugin support for different pseudo random number generators (PRNGs)\n-   Sample from many common distributions\n    -   uniform, normal, poisson, bernoulli, etc\n-   Validates all user input via [ow](https://github.com/sindresorhus/ow)\n-   Integrates with [seedrandom](https://github.com/davidbau/seedrandom)\n-   Supports node >= 6 and browser\n\n## Install\n\n```bash\nnpm install --save random\n```\n\n## Usage\n\n```js\nconst random = require('random')\n\n// quick uniform shortcuts\nrandom.float(min = 0, max = 1) // uniform float in [ min, max )\nrandom.int(min = 0, max = 1) // uniform integer in [ min, max ]\nrandom.boolean() // true or false\n\n// uniform\nrandom.uniform(min = 0, max = 1) // () => [ min, max )\nrandom.uniformInt(min = 0, max = 1) // () => [ min, max ]\nrandom.uniformBoolean() // () => [ false, true ]\n\n// normal\nrandom.normal(mu = 0, sigma = 1)\nrandom.logNormal(mu = 0, sigma = 1)\n\n// bernoulli\nrandom.bernoulli(p = 0.5)\nrandom.binomial(n = 1, p = 0.5)\nrandom.geometric(p = 0.5)\n\n// poisson\nrandom.poisson(lambda = 1)\nrandom.exponential(lambda = 1)\n\n// misc\nrandom.irwinHall(n)\nrandom.bates(n)\nrandom.pareto(alpha)\n```\n\nFor convenience, several common uniform samplers are exposed directly:\n\n```js\nrandom.float()     // 0.2149383367670885\nrandom.int(0, 100) // 72\nrandom.boolean()   // true\n```\n\n**All distribution methods return a thunk** (function with no params), which will return\na series of independent, identically distributed random variables from the specified distribution.\n\n```js\n// create a normal distribution with default params (mu=1 and sigma=0)\nconst normal = random.normal()\nnormal() // 0.4855465422678824\nnormal() // -0.06696771815439678\nnormal() // 0.7350852689834705\n\n// create a poisson distribution with default params (lambda=1)\nconst poisson = random.poisson()\npoisson() // 0\npoisson() // 4\npoisson() // 1\n```\n\nNote that returning a thunk here is more efficient when generating multiple\nsamples from the same distribution.\n\nYou can change the underlying PRNG or its seed as follows:\n\n```js\nconst seedrandom = require('seedrandom')\n\n// change the underlying pseudo random number generator\n// by default, Math.random is used as the underlying PRNG\nrandom.use(seedrandom('foobar'))\n\n// create a new independent random number generator (uses seedrandom under the hood)\nconst rng = random.clone('my-new-seed')\n\n// create a second independent random number generator and use a seeded PRNG\nconst rng2 = random.clone(seedrandom('kittyfoo'))\n\n// replace Math.random with rng.uniform\nrng.patch()\n\n// restore original Math.random\nrng.unpatch()\n```\n\n## API\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n#### Table of Contents\n\n-   [Random](#random)\n    -   [rng](#rng)\n    -   [clone](#clone)\n    -   [use](#use)\n    -   [patch](#patch)\n    -   [unpatch](#unpatch)\n    -   [next](#next)\n    -   [float](#float)\n    -   [int](#int)\n    -   [integer](#integer)\n    -   [bool](#bool)\n    -   [boolean](#boolean)\n    -   [uniform](#uniform)\n    -   [uniformInt](#uniformint)\n    -   [uniformBoolean](#uniformboolean)\n    -   [normal](#normal)\n    -   [logNormal](#lognormal)\n    -   [bernoulli](#bernoulli)\n    -   [binomial](#binomial)\n    -   [geometric](#geometric)\n    -   [poisson](#poisson)\n    -   [exponential](#exponential)\n    -   [irwinHall](#irwinhall)\n    -   [bates](#bates)\n    -   [pareto](#pareto)\n\n### [Random](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L36-L382)\n\nSeedable random number generator supporting many common distributions.\n\nDefaults to Math.random as its underlying pseudorandom number generator.\n\nType: `function (rng)`\n\n-   `rng` **(RNG | [function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/function))** Underlying pseudorandom number generator. (optional, default `Math.random`)\n\n* * *\n\n#### [rng](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L47-L49)\n\nType: `function ()`\n\n* * *\n\n#### [clone](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L61-L67)\n\n-   **See: RNG.clone**\n\nCreates a new `Random` instance, optionally specifying parameters to\nset a new seed.\n\nType: `function (args, seed, opts): Random`\n\n-   `args` **...any**\n-   `seed` **[string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String)?** Optional seed for new RNG.\n-   `opts` **[object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object)?** Optional config for new RNG options.\n\n* * *\n\n#### [use](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L87-L89)\n\nSets the underlying pseudorandom number generator used via\neither an instance of `seedrandom`, a custom instance of RNG\n(for PRNG plugins), or a string specifying the PRNG to use\nalong with an optional `seed` and `opts` to initialize the\nRNG.\n\nType: `function (args)`\n\n-   `args` **...any**\n\nExample:\n\n```javascript\nconst random = require('random')\n\nrandom.use('example_seedrandom_string')\n// or\nrandom.use(seedrandom('kittens'))\n// or\nrandom.use(Math.random)\n```\n\n* * *\n\n#### [patch](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L94-L101)\n\nPatches `Math.random` with this Random instance's PRNG.\n\nType: `function ()`\n\n* * *\n\n#### [unpatch](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L106-L111)\n\nRestores a previously patched `Math.random` to its original value.\n\nType: `function ()`\n\n* * *\n\n#### [next](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L124-L126)\n\nConvenience wrapper around `this.rng.next()`\n\nReturns a floating point number in \\[0, 1).\n\nType: `function (): number`\n\n* * *\n\n#### [float](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L138-L140)\n\nSamples a uniform random floating point number, optionally specifying\nlower and upper bounds.\n\nConvence wrapper around `random.uniform()`\n\nType: `function (min, max): number`\n\n-   `min` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Lower bound (float, inclusive) (optional, default `0`)\n-   `max` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Upper bound (float, exclusive) (optional, default `1`)\n\n* * *\n\n#### [int](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L152-L154)\n\nSamples a uniform random integer, optionally specifying lower and upper\nbounds.\n\nConvence wrapper around `random.uniformInt()`\n\nType: `function (min, max): number`\n\n-   `min` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Lower bound (integer, inclusive) (optional, default `0`)\n-   `max` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Upper bound (integer, inclusive) (optional, default `1`)\n\n* * *\n\n#### [integer](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L168-L170)\n\nSamples a uniform random integer, optionally specifying lower and upper\nbounds.\n\nConvence wrapper around `random.uniformInt()`\n\nType: `function (min, max): number`\n\n-   `min` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Lower bound (integer, inclusive) (optional, default `0`)\n-   `max` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Upper bound (integer, inclusive) (optional, default `1`)\n\n* * *\n\n#### [bool](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L181-L183)\n\nSamples a uniform random boolean value.\n\nConvence wrapper around `random.uniformBoolean()`\n\nType: `function (): boolean`\n\n* * *\n\n#### [boolean](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L192-L194)\n\nSamples a uniform random boolean value.\n\nConvence wrapper around `random.uniformBoolean()`\n\nType: `function (): boolean`\n\n* * *\n\n#### [uniform](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L207-L209)\n\nGenerates a [Continuous uniform distribution](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous)).\n\nType: `function (min, max): function`\n\n-   `min` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Lower bound (float, inclusive) (optional, default `0`)\n-   `max` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Upper bound (float, exclusive) (optional, default `1`)\n\n* * *\n\n#### [uniformInt](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L218-L220)\n\nGenerates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution).\n\nType: `function (min, max): function`\n\n-   `min` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Lower bound (integer, inclusive) (optional, default `0`)\n-   `max` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Upper bound (integer, inclusive) (optional, default `1`)\n\n* * *\n\n#### [uniformBoolean](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L230-L232)\n\nGenerates a [Discrete uniform distribution](https://en.wikipedia.org/wiki/Discrete_uniform_distribution),\nwith two possible outcomes, `true` or \\`false.\n\nThis method is analogous to flipping a coin.\n\nType: `function (): function`\n\n* * *\n\n#### [normal](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L245-L247)\n\nGenerates a [Normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).\n\nType: `function (mu, sigma): function`\n\n-   `mu` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Mean (optional, default `0`)\n-   `sigma` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Standard deviation (optional, default `1`)\n\n* * *\n\n#### [logNormal](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L256-L258)\n\nGenerates a [Log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).\n\nType: `function (mu, sigma): function`\n\n-   `mu` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Mean of underlying normal distribution (optional, default `0`)\n-   `sigma` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Standard deviation of underlying normal distribution (optional, default `1`)\n\n* * *\n\n#### [bernoulli](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L270-L272)\n\nGenerates a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).\n\nType: `function (p): function`\n\n-   `p` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Success probability of each trial. (optional, default `0.5`)\n\n* * *\n\n#### [binomial](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L281-L283)\n\nGenerates a [Binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).\n\nType: `function (n, p): function`\n\n-   `n` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Number of trials. (optional, default `1`)\n-   `p` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Success probability of each trial. (optional, default `0.5`)\n\n* * *\n\n#### [geometric](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L291-L293)\n\nGenerates a [Geometric distribution](https://en.wikipedia.org/wiki/Geometric_distribution).\n\nType: `function (p): function`\n\n-   `p` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Success probability of each trial. (optional, default `0.5`)\n\n* * *\n\n#### [poisson](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L305-L307)\n\nGenerates a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution).\n\nType: `function (lambda): function`\n\n-   `lambda` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Mean (lambda > 0) (optional, default `1`)\n\n* * *\n\n#### [exponential](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L315-L317)\n\nGenerates an [Exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).\n\nType: `function (lambda): function`\n\n-   `lambda` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Inverse mean (lambda > 0) (optional, default `1`)\n\n* * *\n\n#### [irwinHall](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L329-L331)\n\nGenerates an [Irwin Hall distribution](https://en.wikipedia.org/wiki/Irwin%E2%80%93Hall_distribution).\n\nType: `function (n): function`\n\n-   `n` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Number of uniform samples to sum (n >= 0) (optional, default `1`)\n\n* * *\n\n#### [bates](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L339-L341)\n\nGenerates a [Bates distribution](https://en.wikipedia.org/wiki/Bates_distribution).\n\nType: `function (n): function`\n\n-   `n` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Number of uniform samples to average (n >= 1) (optional, default `1`)\n\n* * *\n\n#### [pareto](https://github.com/transitive-bullshit/random/blob/e11a840a1cfe0f5bd9c43640f9645a0b28f61406/src/random.js#L349-L351)\n\nGenerates a [Pareto distribution](https://en.wikipedia.org/wiki/Pareto_distribution).\n\nType: `function (alpha): function`\n\n-   `alpha` **[number](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Number)** Alpha (optional, default `1`)\n\n* * *\n\n## Todo\n\n-   Distributions\n\n    -   [x] uniform\n    -   [x] uniformInt\n    -   [x] uniformBoolean\n    -   [x] normal\n    -   [x] logNormal\n    -   [ ] chiSquared\n    -   [ ] cauchy\n    -   [ ] fischerF\n    -   [ ] studentT\n    -   [x] bernoulli\n    -   [x] binomial\n    -   [ ] negativeBinomial\n    -   [x] geometric\n    -   [x] poisson\n    -   [x] exponential\n    -   [ ] gamma\n    -   [ ] hyperExponential\n    -   [ ] weibull\n    -   [ ] beta\n    -   [ ] laplace\n    -   [x] irwinHall\n    -   [x] bates\n    -   [x] pareto\n\n-   Generators\n\n    -   [x] pluggable prng\n    -   [ ] port more prng from boost\n    -   [ ] custom entropy\n\n-   Misc\n    -   [x] browser support via rollup\n    -   [x] basic docs\n    -   [x] basic tests\n    -   [x] test suite\n    -   [x] initial release!\n\n## Related\n\n-   [d3-random](https://github.com/d3/d3-random) - D3's excellent random number generation library.\n-   [seedrandom](https://github.com/davidbau/seedrandom) - Seedable pseudo random number generator.\n-   [random-int](https://github.com/sindresorhus/random-int) - For the common use case of generating uniform random ints.\n-   [random-float](https://github.com/sindresorhus/random-float) - For the common use case of generating uniform random floats.\n-   [randombytes](https://github.com/crypto-browserify/randombytes) - Random crypto bytes for Node.js and the browser.\n\n## Credit\n\nHuge shoutout to [Roger Combs](https://github.com/rcombs) for donating the `random` npm package for this project!\n\nLots of inspiration from [d3-random](https://github.com/d3/d3-random) ([@mbostock](https://github.com/mbostock) and [@svanschooten](https://github.com/svanschooten)).\n\nSome distributions and PRNGs are ported from C++ [boost::random](https://www.boost.org/doc/libs/1_66_0/doc/html/boost_random/reference.html#boost_random.reference.distributions).\n\n## License\n\nMIT Â© [Travis Fischer](https://github.com/transitive-bullshit)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/transitive-bullshit/random.git"
  },
  "reveal": true,
  "scripts": {
    "build": "babel -s -d dist src",
    "build:watch": "babel -w -s -d dist src",
    "clean": "del dist",
    "docs": "update-markdown-jsdoc -f src/random.js --shallow",
    "prebuild": "yarn run clean",
    "prepublishOnly": "yarn run build",
    "pretest": "yarn run build",
    "start": "yarn build:watch",
    "test": "ava -v && standard"
  },
  "version": "2.2.0"
}
